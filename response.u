use .base
use test.v1
use .http.utils
-- namespace http.response

---
type HttpResponse = {
  statusCode: Nat,
  headers: Map Text Text,
  body: Text
}

statusCodes = Map.fromList ([
  (100, "Continue"),
  (101, "Switching Protocols"),
  (102, "Processing"),
  (200, "OK"),
  (201, "Created"),
  (202, "Accepted"),
  (203, "Non-Authoritative Information"),
  (204, "No Content"),
  (205, "Reset Content"),
  (206, "Partial Content"),
  (207, "Multi-Status"),
  (208, "Already Reported"),
  (226, "IM Used"),
  (300, "Multiple Choices"),
  (301, "Moved Permanently"),
  (302, "Found"),
  (303, "See Other"),
  (304, "Not Modified"),
  (305, "Use Proxy"),
  (307, "Temporary Redirect"),
  (308, "Permanent Redirect"),
  (400, "Bad Request"),
  (401, "Unauthorized"),
  (402, "Payment Required"),
  (403, "Forbidden"),
  (404, "Not Found"),
  (405, "Method Not Allowed"),
  (406, "Not Acceptable"),
  (407, "Proxy Authentication Required"),
  (408, "Request Timeout"),
  (409, "Conflict"),
  (410, "Gone411 Length Required"),
  (412, "Precondition Failed"),
  (413, "Request Entity Too Large"),
  (414, "Request-URI Too Long"),
  (415, "Unsupported Media Type"),
  (416, "Requested Range Not Satisfiable"),
  (417, "Expectation Failed"),
  (418, "I'm a teapot"),
  (420, "Enhance Your Calm"),
  (422, "Unprocessable Entity"),
  (423, "Locked"),
  (424, "Failed Dependency"),
  (426, "Upgrade Required"),
  (428, "Precondition Required"),
  (429, "Too Many Requests"),
  (431, "Request Header Fields Too Large"),
  (444, "No Response"),
  (449, "Retry With"),
  (450, "Blocked by Windows Parental Controls"),
  (451, "Unavailable For Legal Reasons"),
  (499, "Client Closed Request"),
  (500, "Internal Server Error"),
  (501, "Not Implemented"),
  (502, "Bad Gateway"),
  (503, "Service Unavailable"),
  (504, "Gateway Timeout"),
  (505, "HTTP Version Not Supported"),
  (506, "Variant Also Negotiates"),
  (507, "Insufficient Storage"),
  (508, "Loop Detected"),
  (509, "Bandwidth Limit Exceeded"),
  (510, "Not Extended511 Network Authentication Required")
])


statusMessage : HttpResponse -> Text
statusMessage response =
  case Map.lookup (HttpResponse.statusCode response) statusCodes of
    Optional.Some m -> " " ++ m
    Optional.None -> ""

statusLine : HttpResponse -> Text
statusLine response =
  "HTTP/1.1 " ++ Nat.toText (HttpResponse.statusCode response) ++ (statusMessage response)

test> tests.statusMessage.knownMessage = run (expect ((statusLine (HttpResponse 200 Map.empty "")) == "HTTP/1.1 200 OK") )
test> tests.statusMessage.unkownMessage = run (expect ((statusLine (HttpResponse 123 Map.empty "")) == "HTTP/1.1 123"))

buildHeaderLines : List (Text, Text) -> List Text
buildHeaderLines headerList =
  case head headerList of
    Optional.None -> []
    Optional.Some (k, v) -> k ++ ": " ++ v +:  buildHeaderLines (tail headerList)

test> tests.buildHeaderLines.listHasItems = run (expect ((buildHeaderLines [("foo", "bar"), ("a", "b")]) == ["foo: bar", "a: b"]))
test> tests.buildHeaderLines.emptyList = run (expect ((buildHeaderLines []) == []))

headerLines : HttpResponse -> Text
headerLines response =
  listJoin "\n" (buildHeaderLines (Map.toList (HttpResponse.headers response)))

test> tests.headerLines.emptyHeaders = run (expect ((headerLines (HttpResponse 200 Map.empty "")) == ""))
test> tests.headerLines.singleHeader = run (expect ((headerLines (HttpResponse 200 (Map ["foo"] ["bar"]) "")) == "foo: bar"))
test> tests.headerLines.multipleHeaders = run (expect ((headerLines (HttpResponse 200 (Map ["foo", "a"] ["bar", "b"]) "")) == "foo: bar\na: b"))

responseToText : HttpResponse -> Text
responseToText response =
  (statusLine response) ++ "\n" ++
  (
    case headerLines response of
      "" -> ""
      a -> a ++ "\n"
  ) ++
  "\n" ++
  (HttpResponse.body response)

test> tests.responseToText.onlyStatus = run (expect ((responseToText (HttpResponse 200 Map.empty "")) == "HTTP/1.1 200 OK\n\n"))
test> tests.responseToText.statusAndHeaders = run (expect ((responseToText (HttpResponse 200 (Map ["Server"] ["my.server"]) "")) == "HTTP/1.1 200 OK\nServer: my.server\n\n"))
test> tests.responseToText.statusHeadersAndBody = run (expect ((responseToText (HttpResponse 200 (Map ["Server"] ["my.server"]) "Hello!")) == "HTTP/1.1 200 OK\nServer: my.server\n\nHello!"))
