---
use .base
use .http.utils
-- namespace http.request

-- Keeping references here

unique type HttpMethod = GET | HEAD | POST | PUT | DELETE | CONNECT | OPTIONS | TRACE | PATCH

-- TODO: implement queryParams
type HttpRequest = {
  method: HttpMethod,
  path: Text,
  headers: Map Text Text,
  body: Optional Text
}

mapMethod : Text -> Optional HttpMethod
mapMethod methodText = case methodText of
  "GET" -> Optional.Some GET
  "HEAD" -> Optional.Some HEAD
  "POST" -> Optional.Some POST
  "PUT" -> Optional.Some PUT
  "DELETE" -> Optional.Some DELETE
  "CONNECT" -> Optional.Some CONNECT
  "OPTIONS" -> Optional.Some OPTIONS
  "TRACE" -> Optional.Some TRACE
  "PATCH" -> Optional.Some PATCH
  _ -> Optional.None


parseMethod : Text -> Optional HttpMethod
parseMethod requestHeader =
  case head (splitHeaderRows requestHeader) of
    Optional.Some t ->
      case head (splitText "\s" t) of
        Optional.Some m -> mapMethod m
        Optional.None -> Optional.None
    Optional.None -> Optional.None

-- > parseMethod "GET /index.html HTTP/1.1\nHost: www.example.com\nConnection: keep-alive\nCache-Control: max-age=0"

parsePath : Text -> Optional Text
parsePath requestHeader =
  case head (splitHeaderRows requestHeader) of
    Optional.Some t ->
      case head (tail (splitText "\s" t)) of
        Optional.Some p -> Optional.Some p
        Optional.None -> Optional.None
    Optional.None -> Optional.None

-- > parsePath "GET /index.html HTTP/1.1\nHost: www.example.com\nConnection: keep-alive\nCache-Control: max-age=0"

headerRowsToTupleList : List Text -> List (Text, Text)
headerRowsToTupleList hl =
  case head hl of
    Optional.None -> []
    Optional.Some h ->
      case splitHeaderKv h of
        [k, v] -> (k, v) +: headerRowsToTupleList (tail hl)
        _ -> headerRowsToTupleList (tail hl)

parseHeaders : Text -> Map Text Text
parseHeaders requestHeader =
  headerRows = tail (splitHeaderRows requestHeader)
  Map.fromList (headerRowsToTupleList headerRows)

-- > parseHeaders "GET /index.html HTTP/1.1\nHost: www.example.com\nConnection: keep-alive\nCache-Control: max-age=0"
-- > parseHeaders "GET /index.html HTTP/1.1"

splitHeaderKv : Text -> List Text
splitHeaderKv = splitText ": "

splitHeaderRows : Text -> List Text
splitHeaderRows = splitText "\n"

splitHeaderBody : Text -> List Text
splitHeaderBody = splitText "\n\n"

parseRequestHeader : Text -> Optional Text
parseRequestHeader requestText = head (splitHeaderBody requestText)

parseRequestBody : Text -> Optional Text
parseRequestBody requestText =
  case head (tail (splitHeaderBody requestText)) of
    Optional.Some t -> Optional.Some t
    Optional.None -> Optional.None

-- TODO: should we show which part of the request was invalid? Or offer some validation function for that?
textToRequest : Text -> Optional HttpRequest
textToRequest requestText =
  case parseRequestHeader requestText of
    Optional.None -> Optional.None
    Optional.Some h ->
      case (parseMethod h, parsePath h) of
        (Optional.Some m, Optional.Some p) -> Optional.Some (HttpRequest m p (parseHeaders h) (parseRequestBody requestText))
        _ -> Optional.None

-- > textToRequest "GET /index.html HTTP/1.1\nHost: www.example.com\nConnection: keep-alive\nCache-Control: max-age=0"

-- TODO: add tests!

requestToText : HttpRequest -> Text
requestToText r =
  -- TODO: implement me
  "GET /index.html HTTP/1.1\n"
